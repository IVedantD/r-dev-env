---
title: "Build and install R from SVN"
format: html
editor: visual
---

# Download R source code

Here we will download and compile the R source code. The below variables specify the version of R you would like to install and where you would like the source code and compiled version of R.

```{r}
r_version <- "R-4-1-0"
source_dir <- "/home/vscode/r_source_code/"
build_dir <- "/home/vscode/r_build/"
```

Next, we create the source code directories if they do not already exist.

```{r}
mkdir_if_not_exists <- function(dir_path){
    if(!dir.exists(dir_path))
    {
        dir.create(dir_path)
    }
}

r_version_source_dir <- paste0(source_dir, r_version)

mkdir_if_not_exists(source_dir)
mkdir_if_not_exists(r_version_source_dir)
```

Finally, we checkout the source code from SVN into the folder for our R version.

```{r}
svn_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "svn checkout https://svn.r-project.org/R/tags/", r_version, " ."
)
system(svn_command)
```

# Configure Build

The R source code can be built from within this containers. We already have the source code requirements installed. Before we build anything let us make sure we have our build directory ready.

```{r}
r_version_build_dir <- paste0(build_dir, r_version)

mkdir_if_not_exists(build_dir)
mkdir_if_not_exists(r_version_build_dir)
```

Configure our build. This may take a little while.

```{r}
configure_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "./configure",
    " --prefix=", r_version_build_dir, # put builds in build directory
    " --enable-R-shlib- -without-recommended-packages")
system(configure_command)
```

# Modify R

You may want to edit the source files before we build R. You can do so in VSCode. These files are stored in the r_version_source_dir.

```{r}
r_version_source_dir
```

You can check if you have made a modification like so.

```{r}
svn_status_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "svn status"
)
system(svn_status_command)
```

Update SVN to reflect this.

```{r}
svn_update_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "svn update"
)
system(svn_update_command)
```

# Build R

We can check if a make command, which will compile R, will work ok using the make check command in the r source code directory.

```{r}
make_check_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "make check"
)
system(make_check_command)
```

Assuming everything above is ok, then we can build R. Note, this may take quite a while... Time for a coffee, a film, perhaps some YouTube videos.

```{r}
make_command <- paste0(
    "cd ", r_version_source_dir,
    " && ",
    "make",
    " && ",
    "make install"
)
system(make_command)
```

The newly built version of R should be located in the our R build directory. We should double check.

```{r}
ls_command <- paste0(
    "ls ", r_version_build_dir
)
system(ls_command)
```

We can check the version of R by running the newly created R binary and tell it to print out the version.

```{r}
r_version_command <- paste0(
    "cd ", r_version_build_dir,
    " && ",
    "bin/Rscript -e 'version'"
)
system(r_version_command)
```

You should see the new R version.

# Using our new R version

There is an R version already installed in this container.

```{r}
system("which R")
```

The operating system will search for a command in a series of folders specified in the PATH variable.

```{r}
system("$PATH")
```

The /usr/local/bin is before the /usr/bin folder. If we create links to our newly created binaries (R, RScript, etc.) in /usr/local/bin then the system will run these instead of the version of R which came with the container.

```{r}
bin_dir_path <- paste0(r_version_build_dir, "/bin")
our_binaries <- list.files(bin_dir_path)

for(binary in our_binaries){

    source <- paste0(r_version_build_dir, "/bin/", binary)
    target <- paste0("/usr/local/bin/", binary)

    # remove any previous symbolic link
    if(file.exists(target)){
        remove_command <- paste(
            "sudo rm", target
            )
        system(remove_command)
    }

    # create symbolic link
    symbolic_link_command <- paste(
        "sudo ln -s", source, target
    )

    system(symbolic_link_command)
}
```

If you close R and then reopen it the newly compiled version of R should now be loaded. If that is not the case, then open a new terminal and start R from there.

The VSCode extension for R requires the loaded version of R to have the languageserver package installed. Run the below script to do this for the new version of R. Note: this will take around 5 minutes because it will need to be compiled for the current system.

```{r}
install_languageserver_command <- 'Rscript -e "install.packages(\'languageserver\', repos=\'https://cran.rstudio.com\')"'
system(install_languageserver_command)
```